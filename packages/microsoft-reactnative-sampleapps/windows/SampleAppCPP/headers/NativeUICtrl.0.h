// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190730.2

#ifndef WINRT_NativeUICtrl_0_H
#define WINRT_NativeUICtrl_0_H
namespace winrt::NativeUICtrl
{
    struct IReactPackageProvider;
    struct ReactPackageProvider;
}
namespace winrt::impl
{
    template <> struct category<NativeUICtrl::IReactPackageProvider>
    {
        using type = interface_category;
    };
    template <> struct category<NativeUICtrl::ReactPackageProvider>
    {
        using type = class_category;
    };
    template <> struct name<NativeUICtrl::IReactPackageProvider>
    {
        static constexpr auto & value{ L"NativeUICtrl.IReactPackageProvider" };
    };
    template <> struct name<NativeUICtrl::ReactPackageProvider>
    {
        static constexpr auto & value{ L"NativeUICtrl.ReactPackageProvider" };
    };
    template <> struct guid_storage<NativeUICtrl::IReactPackageProvider>
    {
        static constexpr guid value{ 0x49C7B2A3,0x0CB3,0x570E,{ 0xBD,0x5F,0xF0,0xDB,0xFF,0x52,0x6C,0x79 } };
    };
    template <> struct default_interface<NativeUICtrl::ReactPackageProvider>
    {
        using type = NativeUICtrl::IReactPackageProvider;
    };
    template <> struct abi<NativeUICtrl::IReactPackageProvider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_NativeUICtrl_IReactPackageProvider
    {
    };
    template <> struct consume<NativeUICtrl::IReactPackageProvider>
    {
        template <typename D> using type = consume_NativeUICtrl_IReactPackageProvider<D>;
    };
}
#endif
