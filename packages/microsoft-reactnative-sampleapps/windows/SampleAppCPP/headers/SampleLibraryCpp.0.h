// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200316.3

#ifndef WINRT_SampleLibraryCpp_0_H
#define WINRT_SampleLibraryCpp_0_H
WINRT_EXPORT namespace winrt::Windows::UI::Xaml
{
    struct DependencyProperty;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::SampleLibraryCpp
{
    struct ICustomUserControlCpp;
    struct ICustomUserControlCppStatics;
    struct IReactPackageProvider;
    struct CustomUserControlCpp;
    struct ReactPackageProvider;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<SampleLibraryCpp::ICustomUserControlCpp>{ using type = interface_category; };
    template <> struct category<SampleLibraryCpp::ICustomUserControlCppStatics>{ using type = interface_category; };
    template <> struct category<SampleLibraryCpp::IReactPackageProvider>{ using type = interface_category; };
    template <> struct category<SampleLibraryCpp::CustomUserControlCpp>{ using type = class_category; };
    template <> struct category<SampleLibraryCpp::ReactPackageProvider>{ using type = class_category; };
    template <> struct category<SampleLibraryCpp::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<SampleLibraryCpp::CustomUserControlCpp> = L"SampleLibraryCpp.CustomUserControlCpp";
    template <> inline constexpr auto& name_v<SampleLibraryCpp::ReactPackageProvider> = L"SampleLibraryCpp.ReactPackageProvider";
    template <> inline constexpr auto& name_v<SampleLibraryCpp::XamlMetaDataProvider> = L"SampleLibraryCpp.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<SampleLibraryCpp::ICustomUserControlCpp> = L"SampleLibraryCpp.ICustomUserControlCpp";
    template <> inline constexpr auto& name_v<SampleLibraryCpp::ICustomUserControlCppStatics> = L"SampleLibraryCpp.ICustomUserControlCppStatics";
    template <> inline constexpr auto& name_v<SampleLibraryCpp::IReactPackageProvider> = L"SampleLibraryCpp.IReactPackageProvider";
    template <> inline constexpr guid guid_v<SampleLibraryCpp::ICustomUserControlCpp>{ 0x392C0685,0xC494,0x56B5,{ 0xA8,0xB4,0xD8,0x2C,0xF1,0x3E,0x4D,0xB4 } };
    template <> inline constexpr guid guid_v<SampleLibraryCpp::ICustomUserControlCppStatics>{ 0x08F99773,0xD696,0x5AC9,{ 0x8C,0x58,0x78,0x4B,0x24,0x01,0xE4,0x46 } };
    template <> inline constexpr guid guid_v<SampleLibraryCpp::IReactPackageProvider>{ 0xE610C96C,0xA9EC,0x5F2D,{ 0xBA,0x6C,0x90,0xA4,0x22,0x04,0x67,0xEC } };
    template <> struct default_interface<SampleLibraryCpp::CustomUserControlCpp>{ using type = SampleLibraryCpp::ICustomUserControlCpp; };
    template <> struct default_interface<SampleLibraryCpp::ReactPackageProvider>{ using type = SampleLibraryCpp::IReactPackageProvider; };
    template <> struct default_interface<SampleLibraryCpp::XamlMetaDataProvider>{ using type = Windows::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<SampleLibraryCpp::ICustomUserControlCpp>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall put_Label(void*) noexcept = 0;
        };
    };
    template <> struct abi<SampleLibraryCpp::ICustomUserControlCppStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LabelProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<SampleLibraryCpp::IReactPackageProvider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_SampleLibraryCpp_ICustomUserControlCpp
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Label() const;
        WINRT_IMPL_AUTO(void) Label(param::hstring const& value) const;
    };
    template <> struct consume<SampleLibraryCpp::ICustomUserControlCpp>
    {
        template <typename D> using type = consume_SampleLibraryCpp_ICustomUserControlCpp<D>;
    };
    template <typename D>
    struct consume_SampleLibraryCpp_ICustomUserControlCppStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) LabelProperty() const;
    };
    template <> struct consume<SampleLibraryCpp::ICustomUserControlCppStatics>
    {
        template <typename D> using type = consume_SampleLibraryCpp_ICustomUserControlCppStatics<D>;
    };
    template <typename D>
    struct consume_SampleLibraryCpp_IReactPackageProvider
    {
    };
    template <> struct consume<SampleLibraryCpp::IReactPackageProvider>
    {
        template <typename D> using type = consume_SampleLibraryCpp_IReactPackageProvider<D>;
    };
}
#endif
