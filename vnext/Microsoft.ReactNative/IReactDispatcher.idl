// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import "IReactPropertyBag.idl";
#include "DocString.h"

namespace Microsoft.ReactNative {

  // The delegate is used to create property value on-demand.
  [webhosthidden]
  DOC_STRING("The delegate is used to create property value on-demand.")
  delegate void ReactDispatcherCallback();

  [webhosthidden]
  DOC_STRING("`IReactDispatcher` provides the core threading/task management interface for ensuring code happens in the right order on the right thread. \
One primary dispatcher that applications may require is the @IReactContext.UIDispatcher which provides native modules access to the UI thread associated with this react instance.   Another one is the @IReactContext.JSDispatcher which allows apps to post tasks to the JS engine thread.")
  interface IReactDispatcher
  {
    // True if dispatcher uses current thread.
    DOC_STRING("`true` if the dispatcher uses current thread.")
    Boolean HasThreadAccess { get; };

    // Post task for the asynchronous execution.
    DOC_STRING("Post a task to the dispatcher.  This callback will be called asynchronously on the thread/queue associated with this dispatcher.")
    void Post(ReactDispatcherCallback callback);
  }

  // Helper methods for the property bag implementation.
  [webhosthidden]
  static runtimeclass ReactDispatcherHelper
  {
    // Creates a new serial dispatcher that uses thread pool to run tasks.
    static IReactDispatcher CreateSerialDispatcher();

    // Get or create IReactDispatcher for the current UI thread.
    static IReactDispatcher UIThreadDispatcher{ get; };

    // Get name of the UIDispatcher property for the IReactPropertyBag.
    static IReactPropertyName UIDispatcherProperty { get; };

    // Get name of the JSDispatcher property for the IReactPropertyBag.
    static IReactPropertyName JSDispatcherProperty { get; };
  }
} // namespace ReactNative
